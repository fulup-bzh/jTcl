# $Header: /Master/jTcl/zDemo/IcEngine/server/Rules/rulesIcDemo.jTcl,v 1.2 1999/03/08 08:34:20 fulup Exp $
# Copyright(c) 1996-97 FRIDU a Free Software Company
#
# File      :   ../Rules/rulesIcDemo.jTcl
# Projet    :   GUI control
# Module    :   Ic engine rules
# Auteur    :   Automaticaly Generated by jIc from ../Rules/rulesIcDemo.ics
#
# Last
#      Author      : $Author: fulup $
#      Date        : $Date: 1999/03/08 08:34:20 $
#      Revision    : $Revision: 1.2 $
#      Source      : $Source: /Master/jTcl/zDemo/IcEngine/server/Rules/rulesIcDemo.jTcl,v $
#      State       : $State: Exp $
#
# Modification History
# --------------------
# 01a,03mar98, taken from old ics demo version with jIc
#
# Import needed modules
# ----------------------

 jClassImport {ic.rule*}

  class SavingHost {extends Object} {
  SavingHost {name incremental full rcmd}
  {
  set THIS(name) $name
  set THIS(incremental) $incremental
  set THIS(full) $full
  set THIS(rcmd) $rcmd
  }
  }

class all {extends IcRuleClass} {
 static depends { lang everything}
static  phony 1

all {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class everything {extends IcRuleClass} {
 static depends { HostAll}
static  phony 1

everything {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class HostAll {extends IcRuleClass} {
 static depends { HostDone}
static  phony 1

HostAll {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class HostDone {extends IcRuleClass} {
 static depends { HostName HostIncremental HostFull HostRcmd}
static  tip-us "Valid/remove host in saving list"
static  tip-fr "Ajoute/Suprime la machine de la liste des sauvegardes"
static  libel-fr "Termin�"
static  libel-us "Done"
static  done-us "Host as been registrated"
static  done-fr "La machine a ete enregistr�e"

 public list {PARAM} {
  set THIS(data-temp)   "message list"
   upvar #0 $THIS(engine) ENGINE
  foreach HOST [array names THIS _Host*] {
  lappend THIS(message) [$HOST_ID name]
  }
 }
 public valid {PARAM HostName HostIncremental HostFull HostRcmd} {
  set THIS(value)  $PARAM
  set THIS(param)  $PARAM
  set THIS(previous)  $THIS(value)
  set THIS(status) OK
  set THIS(tic) [clock clicks]
  set THIS(data-extra)  "value status"
  set THIS(data-temp)   "message error"
   upvar #0 $THIS(engine) ENGINE
  if {$HostName == ""} {
  free $THIS(_Host$HostName)
  } else {
  set THIS(_$HostName) [new SavingHost $HostName $HostIncremental $HostFull $HostRcmd]
  set THIS(message) $CLASS(done-$ENGINE(lang))
  }
 }
HostDone {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class HostName {extends IcRuleClass} {
static  tip-us "Internet host name"
static  tip-fr "Nom Internet de la machine"
static  invalid-host-us "Not a valid DNS host name"
static  invalid-host-fr "Nom de machine incorrected ou inconnue"
static  libel-us "Internet Host Name"
static  libel-fr "Nom Internet"

 public default {PARAM} {
  set THIS(status) OK
  set THIS(tic)    [clock clicks]
  set THIS(data-extra)  "value status"
   upvar #0 $THIS(engine) ENGINE
  set THIS(value) localhost
 }
 public list {PARAM} {
  set THIS(data-temp)   "message list"
   upvar #0 $THIS(engine) ENGINE
  set THIS(list) [list localhost sunscript.sun.com  www.linux.org erwan.sene.bzh lena.sene.bzh ast.sene.bzh]
 }
 public valid {PARAM} {
  set THIS(value)  $PARAM
  set THIS(param)  $PARAM
  set THIS(previous)  $THIS(value)
  set THIS(status) OK
  set THIS(tic) [clock clicks]
  set THIS(data-extra)  "value status"
  set THIS(data-temp)   "message error"
   upvar #0 $THIS(engine) ENGINE
  if [catch {socket $PARAM 21} SOCK] {
  set THIS(status) FX
  set THIS(error) $CLASS(invalid-host-$ENGINE(lang))
  } else {
  close $SOCK
  set THIS(message) "$PARAM DNS ok"
  }
 }
HostName {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class HostIncremental {extends IcRuleClass} {
static  tip-us "Operating system incremental saving command"
static  tip-fr "Syntaxe de la commande de sauvegarde incr�mentale"
static  libel-us "Incremental saving command"
static  libel-fr "Command de sauvegarde incr�mentale"
static  notset-us "Save incremental command should be filled"
static  notset-fr "La commande de sauvegarde incr�mentale doit etre renseign�e"
static  invalid-us "Incremental saving command shoud be a valid file"
static  invalid-fr "La commande de sauvegarde incr�mentale ne correspond pas a un nom de ficher"

 public default {PARAM} {
  set THIS(status) OK
  set THIS(tic)    [clock clicks]
  set THIS(data-extra)  "value status"
   upvar #0 $THIS(engine) ENGINE
  set THIS(status) FX
  set THIS(error) $CLASS(notset-$ENGINE(lang))
 }
 public list {PARAM} {
  set THIS(data-temp)   "message list"
   upvar #0 $THIS(engine) ENGINE
  lappend THIS(list) {dump 2uBf $DENSITY $LEN $DEVICE $PARTITION}
  lappend THIS(list) {rdump 2uBf $SIZE fridu:$DEVICE $PARTITION}
 }
 public valid {PARAM} {
  set THIS(value)  $PARAM
  set THIS(param)  $PARAM
  set THIS(previous)  $THIS(value)
  set THIS(status) OK
  set THIS(tic) [clock clicks]
  set THIS(data-extra)  "value status"
  set THIS(data-temp)   "message error"
   upvar #0 $THIS(engine) ENGINE
  if [file exists /sbin/[lindex $PARAM 0]] {
  set THIS(value) $PARAM
  } else {
  set THIS(error) $CLASS(invalid-$ENGINE(lang))
  set THIS(status) FX
  }
 }
HostIncremental {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class HostFull {extends IcRuleClass} {
static  tip-us "Operating system full saving command"
static  tip-fr "Syntaxe de la commande de sauvegarde totale"
static  libel-us "Full saving command"
static  libel-fr "Command de sauvegarde totale"
static  notset-us "Full save command should be filled"
static  notset-fr "La commande de sauvegarde totale doit etre renseign�e"
static  invalid-us "Full saving command should be a valid file"
static  invalid-fr "La commande de sauvegarde totale ne correspond pas a un nom de ficher"

 public default {PARAM} {
  set THIS(status) OK
  set THIS(tic)    [clock clicks]
  set THIS(data-extra)  "value status"
   upvar #0 $THIS(engine) ENGINE
  set THIS(status) FX
  set THIS(error) $CLASS(notset-$ENGINE(lang))
 }
 public list {PARAM} {
  set THIS(data-temp)   "message list"
   upvar #0 $THIS(engine) ENGINE
  lappend THIS(list) {dump 0uBf $DENSITY $LEN $DEVICE $PARTITION}
  lappend THIS(list) {rdump 0uBf $SIZE fridu:$DEVICE $PARTITION}
 }
 public valid {PARAM} {
  set THIS(value)  $PARAM
  set THIS(param)  $PARAM
  set THIS(previous)  $THIS(value)
  set THIS(status) OK
  set THIS(tic) [clock clicks]
  set THIS(data-extra)  "value status"
  set THIS(data-temp)   "message error"
   upvar #0 $THIS(engine) ENGINE
  if [file exists /sbin/[lindex $PARAM 0]] {
  set THIS(value) $PARAM
  } else {
  set THIS(error) $CLASS(invalid-$ENGINE(lang))
  set THIS(status) FX
  }
 }
HostFull {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class HostRcmd {extends IcRuleClass} {
static  libel-us "Remote shell command"
static  libel-fr "Command d'ex�cution distante"
static  tip-us "Operating system full saving command"
static  tip-fr "Syntaxe de la commande de sauvegarde totale"
static  notset-us "Rsh Command should be filled"
static  notset-fr "La commande rsh doit etre renseign�e"
static  invalid-us "RSH command should be a valid file"
static  invalid-fr "La command RSH ne correspond pas a un nom de ficher"

 public default {PARAM} {
  set THIS(status) OK
  set THIS(tic)    [clock clicks]
  set THIS(data-extra)  "value status"
   upvar #0 $THIS(engine) ENGINE
  set THIS(status) FX
  set THIS(error) $CLASS(notset-$ENGINE(lang))
 }
 public list {PARAM} {
  set THIS(data-temp)   "message list"
   upvar #0 $THIS(engine) ENGINE
  lappend THIS(list) {rsh $HOST $CMD}
  lappend THIS(list) {rcmd $HOST $CMD}
 }
 public valid {PARAM} {
  set THIS(value)  $PARAM
  set THIS(param)  $PARAM
  set THIS(previous)  $THIS(value)
  set THIS(status) OK
  set THIS(tic) [clock clicks]
  set THIS(data-extra)  "value status"
  set THIS(data-temp)   "message error"
   upvar #0 $THIS(engine) ENGINE
  if [file exists /usr/bin/[lindex $PARAM 0]] {
  set THIS(value) $PARAM
  } else {
  set THIS(error) $CLASS(invalid-$ENGINE(lang))
  set THIS(status) FX
  }
 }
HostRcmd {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}

class lang {extends IcRuleClass} {
static  langs {us fr}
static  phony 1

 public valid {PARAM} {
  set THIS(value)  $PARAM
  set THIS(param)  $PARAM
  set THIS(previous)  $THIS(value)
  set THIS(status) OK
  set THIS(tic) [clock clicks]
  set THIS(data-extra)  "value status"
  set THIS(data-temp)   "message error"
   upvar #0 $THIS(engine) ENGINE
  set LANG [string tolower $PARAM]
  if {[string first $LANG $CLASS(langs)] < 0}\
  {
  set THIS(status) FX
  set THIS(message) [concat "Error: language should be in:" $CLASS(lang)]
  return
  }
  $THIS(engine) set lang $LANG
 }
lang {ENG_ID} {
  $SUPER $MY $ENG_ID
 }
}
  proc icRuleTest {} {
  global ENG_ID
  set ENG_ID [new IcRuleEngine all]
  puts "+++default all=[$ENG_ID doIt decorate all]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostIncremental toto"]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostName toto.sene.bzh"]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostName fridu.sene.bzh"]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostFull dump tutu tata"]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostFull snoopy tutu tata"]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostIncremental dump tutu tata"]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostIncremental snoopy tutu tata"]"
  puts "+++HostIncremental [$ENG_ID doIt valid "HostRcmd rsh tutu titi"]"
  }
  if [info exists JTCl_DEBUG] {icRuleTest}
